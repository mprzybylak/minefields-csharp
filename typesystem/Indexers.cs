using System;
namespace Typesystem.ReferenceTypes
{
	public static class Indexers
	{
		public static void example()
		{
			Console.WriteLine("Indexers example");
			usageExample();
			Console.WriteLine();
		}

		public static void usageExample()
		{
			LikeArray likeArray = new LikeArray();
			for (int i = 0; i < 10; ++i)
			{
				Console.WriteLine("writing to object using index: {0} setting value {0}", i);
				likeArray[i] = i;
			}

			for (int i = 0; i < 10; ++i)
			{
				Console.WriteLine("Reading from object using index: {0} getting value {1}", i, likeArray[i]);
			}

			for (int i = 0; i < 5; ++i)
			{
				for (int j = 0; j < 5; ++j)
				{
					likeArray[i, j] = i + j;
					Console.Write("write to a[{0},{1}] = {2} ", i, j, i + j);
				}
				Console.WriteLine();
			}

			for (int i = 0; i < 5; ++i)
			{
				for (int j = 0; j < 5; ++j)
				{
					Console.Write("read from a[{0}, {1}] = {2} ", i, j, likeArray[i, j]);
				}
				Console.WriteLine();
			}



		}
	}

	public class LikeArray
	{
		private static int[] staticArray = new int[10];
		private int[] array = new int[10];
		private int[,] array2d = new int[5, 5];

		public int this[int index]
		{
			get { return array[index]; }
			set { array[index] = value; }
		}

		// we can override indexer
		public int this[string index]
		{
			get { return array[Int32.Parse(index)]; }
			set { array[Int32.Parse(index)] = value; }
		}

		// we can have "multi-dimension" indexers
		public int this[int firstIndex, int secondIndex]
		{
			get { return array2d[firstIndex, secondIndex]; }
			set { array2d[firstIndex, secondIndex] = value; }
		}

		// ilegall - indexer cannot be static
		//public static int this[int index] 
		//{
		//	get { return staticArray[index]; }
		//	set { staticArray[index] = value; }
		//}
	}

	public class ShortHandGetter
	{
		private int[] array = new int[10];

		public int this[int index] => array[index];

		// ilegall - there is no autogenerated accessors:
		// public int this[int index] { get; set; }
	}
}
