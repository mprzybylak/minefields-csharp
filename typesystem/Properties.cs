using System;
namespace Typesystem.ReferenceTypes
{
	public static class Properties
	{
		public static void example()
		{
			Console.WriteLine("Properties examples");
			simpleUsage();
			propertyIsAMethod();
			Console.WriteLine();
		}

		private static void simpleUsage()
		{
			Person person = new Person();

			// we are using property like it is regular public field
			person.FirstName = "John";
			Console.WriteLine("We assigned value to property - let's read it {0}", person.FirstName);
		}

		private static void propertyIsAMethod()
		{
			string firstValue = "value";
			Console.WriteLine("Simple string before passing as ref: {0}", firstValue);
			changeValueAsRef(ref firstValue);
			Console.WriteLine("Simple string after passing as ref: {0}", firstValue);

			Person person = new Person();
			person.FirstName = "James";

			// we cannot do that - property is a method, we cannot pass it like a variable
			// changeValueAsRef(ref person.FirstName);

			string secondValue = "second value";
			Console.WriteLine("Simple string before passing as out: {0}", secondValue);
			changeValueAsOut(out secondValue);
			Console.WriteLine("Simple string afger passing as out: {0}", secondValue);

			Person secondPerson = new Person();
			secondPerson.FirstName = "Jane";

			// we cannot do that - property is a method, we cannot pass it like a variable
			// changeValueAsOut(out secondPerson.FirstName);

		}

		private static void changeValueAsRef(ref string value)
		{
			value = "changed as ref";
		}

		private static void changeValueAsOut(out string value)
		{
			value = "changed as out";
		}
		
	}

	public class Person
	{
		private string firstName;

		public string FirstName
		{
			get
			{
				return firstName;
			}
			set
			{
				firstName = value;
			}
		}
	}

	public class AutoGeneratedProperties
	{
		public int AutoGetterAndSetter { get; set; }
		public int AutoGetter => 20;
		public int AutoGetterAndSetterWithDefaultValue { get; set; } = 100;
	}
}
